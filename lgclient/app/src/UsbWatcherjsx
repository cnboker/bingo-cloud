import React, {useEffect, useState} from "react";
import {config, webosApis} from "lgservice";
import {ToastContainer, toast} from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default() => {
    const {getAttachedStorageDeviceList, eject} = webosApis.usbservice
    const {listFiles, unzipFile, rmdir} = webosApis.webosFileService
    const {restart} = webosApis.applicationmanager
    const [deviceNum,
        setDeviceNum] = useState(false)

    useEffect(() => {
        getAttachedStorageDeviceList().then(res => {
            for (var usb of res) {
                console.log('usb info', usb);
                if (usb.storageType === 'USB_STORAGE') {
                    const mountName = use.rootPath + '/sdb1'
                    setDeviceNum(usb.usePortNum)
                    importData(mountName)
                }
            }

        })
    }, [])

    const importData = (path) => {
        listFiles(path).then(fileInfos => {
            return fileInfos
                .files
                .filter(x => {
                    return x.type === "file" && x
                        .name
                        .indexOf(".zipx") > 0;
                })
                .map(x => {
                    return `${path}/${x.name}`;
                });
        }).then(files => {
            console.log("io files", files);
            if (files.length === 0) {
                toast("zip package not exist from usb");
            } else {
                zipFile(files[0]);
            }
        });
    }

    const zipFile = (usbFile) => {
        rmdir(`${config.ROOT}/downloads`).then(() => {
            return unzipFile(usbFile, `${config.ROOT}/downloads`);
        }).then(() => {
            toast("Application Update complete. Unplug the U disk and restart the Application....");
            eject(deviceNum)
            return restart()
        })
        .then(x=>{
            console.log('restart success')
        })
        .catch(err => {
            toast(err);
        });
    }

    return (
        <React.Fragment>
            <ToastContainer
                position="bottom-right"
                autoClose={5000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnVisibilityChange
                draggable
                pauseOnHover/>
        </React.Fragment>
    );
}
